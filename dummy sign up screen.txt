import React, { useState } from "react";
import {
  StyleSheet,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Image,
  KeyboardAvoidingView,
  ScrollView,
} from "react-native";
import { FontAwesome } from "@expo/vector-icons";

const SignUpPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
    setShowConfirmPassword(!showConfirmPassword);
  };

  const keyboardVerticalOffset = Platform.OS === "ios" ? 100 : -100;

  return (
    <View style={styles.container}>
      {/* Sign Up Illustration */}
      <View style={styles.imageContainer}>
        <Image
          source={require("../assets/signupillustrate.png")}
          style={styles.image}
        />
      </View>

      {/* Sign up Form  */}
      <ScrollView
        contentContainerStyle={{ flexGrow: 1 }}
        keyboardShouldPersistTaps="handled"
      >
        <KeyboardAvoidingView
          behavior="padding"
          style={{ flex: 1, justifyContent: "space-between" }}
          // keyboardVerticalOffset={keyboardVerticalOffset}
        >
          <View style={styles.formContainer}>
            <Text style={styles.title}>Sign Up</Text>
            <View style={styles.inputContainer}>
              <FontAwesome
                name="user"
                size={24}
                color="black"
                style={styles.icon}
              />
              <TextInput placeholder="Username" style={styles.input} />
            </View>
            <View style={styles.inputContainer}>
              <FontAwesome
                name="envelope"
                size={24}
                color="black"
                style={styles.icon}
              />
              <TextInput placeholder="Email" style={styles.input} />
            </View>
            <View style={styles.inputContainer}>
              <FontAwesome
                name="lock"
                size={24}
                color="black"
                style={styles.icon}
              />
              <TextInput
                placeholder="Password"
                secureTextEntry={!showPassword}
                style={styles.input}
                value={password}
                onChangeText={setPassword}
              />
              <TouchableOpacity onPress={toggleShowPassword}>
                <FontAwesome
                  name={showPassword ? "eye-slash" : "eye"}
                  size={24}
                  color="black"
                  style={styles.icon}
                />
              </TouchableOpacity>
            </View>
            <View style={styles.inputContainer}>
              <FontAwesome
                name="lock"
                size={24}
                color="black"
                style={styles.icon}
              />
              <TextInput
                placeholder="Confirm Password"
                secureTextEntry={!showConfirmPassword}
                style={styles.input}
                value={confirmPassword}
                onChangeText={setConfirmPassword}
              />
              <TouchableOpacity onPress={toggleShowPassword}>
                <FontAwesome
                  name={showPassword ? "eye-slash" : "eye"}
                  size={24}
                  color="black"
                  style={styles.icon}
                />
              </TouchableOpacity>
            </View>
            <View style={styles.buttonContainer}>
              <TouchableOpacity style={styles.button}>
                <Text style={styles.buttonText}>Sign Up</Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
    paddingHorizontal: 20,
  },
  imageContainer: {
    height: 180,
    width: "100%",
    marginBottom: 20,
  },
  image: {
    flex: 1,
    width: "100%",
    height: "100%",
  },
  title: {
    fontSize: 32,
    fontWeight: "bold",
    marginBottom: 40,
    textAlign: "left",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 5,
    padding: 10,
    marginVertical: 10,
  },
  input: {
    flex: 1,
    marginLeft: 10,
    fontSize: 18,
  },
  icon: {
    marginRight: 10,
  },
  buttonContainer: {
    marginTop: 20,
    marginBottom: 50,
    width: "100%",
    alignItems: "center",
    justifyContent: "center",
  },
  button: {
    backgroundColor: "blue",
    paddingHorizontal: 30,
    paddingVertical: 10,
    borderRadius: 10,
  },
  buttonText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
  formContainer: {
    width: "100%",
    marginBottom: 20,
  },
});

export default SignUpPage;



import { StatusBar } from "expo-status-bar";
import { useState } from "react";
import {
  StyleSheet,
  TextInput,
  View,
  Button,
  SafeAreaView,
} from "react-native";

export default function App() {
  const [username, setUsername] = useState(null);
  const [email, setEmail] = useState(null);
  const [first_name, setFirstName] = useState(null);
  const [last_name, setLastName] = useState(null);
  const [password, setPassword] = useState(null);

  const register = (name) => {
    fetch("https://thender.onrender.com/account/signup/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: username,
        email: email,
        first_name: first_name,
        last_name: last_name,
        password: password,
      }),
    })
      .then((res) => {
        console.log(res.status);
        console.log(res.headers);
        return res.json();
      })
      .then(
        (result) => {
          console.log(result);
        },
        (error) => {
          console.log(error);
        }
      );
  };

  return (
    <SafeAreaView style={styles.container}>
      <TextInput
        placeholder="Username"
        style={styles.input}
        value={username}
        onChangeText={(value) => setUsername(value)}
      />
      <TextInput
        placeholder="email"
        style={styles.input}
        value={email}
        onChangeText={(value) => setEmail(value)}
      />
      <TextInput
        placeholder="first name"
        style={styles.input}
        value={first_name}
        onChangeText={(value) => setFirstName(value)}
      />
      <TextInput
        placeholder="last name"
        style={styles.input}
        value={last_name}
        onChangeText={(value) => setLastName(value)}
      />
      <TextInput
        placeholder="password"
        style={styles.input}
        value={password}
        onChangeText={(text) => setPassword(text)}
      />
      <Button
        title="Get"
        onPress={() =>
          register(username, email, password, first_name, last_name)
        }
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
  input: {
    alignSelf: "stretch",
    margin: 8,
    padding: 4,
  },
});




//Working Sign uo screen!!!!!!
import axios from "axios";
import React, { useState } from "react";
import {
  StyleSheet,
  Text,
  ScrollView,
  View,
  Button,
  Platform,
  TextInput,
  KeyboardAvoidingView
} from "react-native";
import {
  Feather,
  SimpleLineIcons,
  AntDesign,
  Ionicons,
} from "@expo/vector-icons";
import Constants from "expo-constants";
import CustomButton from "./src/components/CustomButton";

const baseUrl = "https://thender.onrender.com/account";

const SignUpScreen  = ({ navigation }) => {
  const [username, setUsername] = useState("");
  const [first_name, setFirstName] = useState("");
  const [last_name, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState("");

  const onChangeuserNameHandler = (username) => {
    setUsername(username);
  };

  const onChangeFirstNameHandler = (first_name) => {
    setFirstName(first_name);
  };
  const onChangeLastNameHandler = (last_name) => {
    setLastName(last_name);
  };

  const onChangeEmailHandler = (email) => {
    setEmail(email);
  };

  const onChangePassword = (password) => {
    setPassword(password);
  };

  const onSubmitFormHandler = async (event) => {
    if (!username.trim() || !email.trim()) {
      alert("Name or Email is invalid");
      return;
    }
    setIsLoading(true);
    try {
      const response = await axios.post(
        `https://thender.onrender.com/account/signup/`,
        {
          username,
          first_name,
          last_name,
          email,
          password,
        }
      );
      if (response.status === 201) {
        alert(` You have created: ${JSON.stringify(response.data)}`);
        setIsLoading(false);
        setUsername("");
        setFirstName("");
        setLastName("");
        setEmail("");
        setPassword("");
      } else {
        throw new Error("An error has occurred");
      }
    } catch (error) {
      console.log(error);
      alert("An error has occurred");
      setIsLoading(false);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View>
        <View style={styles.wrapper}>
          {isLoading ? (
            <Text style={styles.formHeading}> Creating resource </Text>
          ) : (
            <Text style={styles.formHeading}>Create new user</Text>
          )}
        </View>
        <View style={styles.wrapper}>
          <TextInput
            placeholder="User Name"
            placeholderTextColor="#ffffff"
            style={styles.input}
            value={username}
            editable={!isLoading}
            onChangeText={onChangeuserNameHandler}
          />
        </View>
        <View style={styles.wrapper}>
          <TextInput
            placeholder="First Name"
            placeholderTextColor="#ffffff"
            style={styles.input}
            value={first_name}
            editable={!isLoading}
            onChangeText={onChangeFirstNameHandler}
          />
        </View>
        <View style={styles.wrapper}>
          <TextInput
            placeholder="Last Name"
            placeholderTextColor="#ffffff"
            style={styles.input}
            value={last_name}
            editable={!isLoading}
            onChangeText={onChangeLastNameHandler}
          />
        </View>
        <View style={styles.wrapper}>
          <TextInput
            placeholder="Email"
            placeholderTextColor="#ffffff"
            style={styles.input}
            value={email}
            editable={!isLoading}
            onChangeText={onChangeEmailHandler}
          />
        </View>
        <View style={styles.wrapper}>
          <TextInput
            placeholder="Password"
            placeholderTextColor="#ffffff"
            style={styles.input}
            value={password}
            editable={!isLoading}
            onChangeText={onChangePassword}
          />
        </View>
        <View>
          <Button
            title="Submit"
            onPress={onSubmitFormHandler}
            style={styles.submitButton}
            disabled={isLoading}
          />
        </View>
      </View>
    </ScrollView>
  );
}

export default SignUpScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#252526",
    alignItems: "center",
    justifyContent: "center",
    marginTop: Platform.OS === "ios" ? 0 : Constants.statusBarHeight,
  },
  formHeading: {
    color: "#ffffff",
  },
  wrapper: {
    marginBottom: 10,
  },
  input: {
    borderWidth: 2,
    borderColor: "grey",
    minWidth: 200,
    textAlignVertical: "center",
    paddingLeft: 10,
    borderRadius: 20,
    color: "#ffffff",
  },
  submitButton: {
    backgroundColor: "gray",
    padding: 100,
  },
});




Bullshit

import { useLayoutEffect, useContext, useState } from "react";
import {
  View,
  Text,
  ScrollView,
  Image,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  KeyboardAvoidingView,
} from "react-native";
import {
  Feather,
  SimpleLineIcons,
  AntDesign,
  Ionicons,
} from "@expo/vector-icons";
import CustomButton from "../components/CustomButton";
// import { loadFonts } from "../components/fonts";

const SignUpScreen = ({ navigation }) => {
  const [username, setUsername] = useState("");
  const [first_name, setFirstName] = useState("");
  const [last_name, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const onChangeuserNameHandler = (username) => {
    setUsername(username);
  };

  const onChangeFirstNameHandler = (first_name) => {
    setFirstName(first_name);
  };
  const onChangeLastNameHandler = (last_name) => {
    setLastName(last_name);
  };

  const onChangeEmailHandler = (email) => {
    setEmail(email);
  };

  const onChangePassword = (password) => {
    setPassword(password);
  };

  const register = () => {
    fetch("https://thender.onrender.com/account/signup/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: username,
        email: email,
        first_name: first_name,
        last_name: last_name,
        password: password,
      }),
    })
      .then((res) => {
        console.log(res.status);
        console.log(res.headers);
        return res.json();
        // if (res.ok) {
        //   return res.json();
        // } else {
        //   throw new Error("Registration failed.");
        // }
      })
      .then(
        (result) => {
          console.log(result);
          // Reset form fields and show success message
          // setUsername("");
          // setFirstName("");
          // setLastName("");
          // setEmail("");
          // setPassword("");
          // setErrorMessage("Registration successful!");
        },
        (error) => {
          console.log(error);
          // Show error message to user
          // setErrorMessage(error.message);
        }
      );
  };

  useLayoutEffect(() => {
    navigation.setOptions({
      // headerShown: false,
      title: "",
      headerRight: () => (
        <View
          style={{
            width: 150,
            flexDirection: "row",
            justifyContent: "space-between",
            backgroundColor: "white",
            alignItems: "center",
            marginBottom: 10,
          }}
        >
          <TouchableOpacity>
            <View
              style={{
                borderRadius: 24,
                borderColor: "#0011FF",
                borderWidth: 1,
                alignItems: "center",
                padding: 8,
              }}
            >
              <Feather name="wifi-off" size={24} color="#0011FF" />
            </View>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => navigation.replace("LogIn")}>
            <View
              style={{
                width: 100,
                // height: 25,
                borderRadius: 16,
                borderColor: "#0011FF",
                borderWidth: 2,
                alignItems: "center",
                padding: 8,
              }}
            >
              <Text
                style={{
                  color: "#0011FF",
                  textAlign: "center",
                  fontSize: 18,
                  // fontFamily: "comfortaa-bold",
                }}
              >
                Log In
              </Text>
            </View>
          </TouchableOpacity>
        </View>
      ),
    });
  }, []);

  const keyboardVerticalOffset = Platform.OS === "ios" ? 100 : -100;

  // if (!fontsLoaded) {
  //   return null; // or a loading indicator
  // }

  return (
    <ScrollView
      contentContainerStyle={{ flexGrow: 1 }}
      keyboardShouldPersistTaps="handled"
      bounces={false}
      showsVerticalScrollIndicator={false}
    >
      <KeyboardAvoidingView
        style={styles.container}
        behavior="padding"
        keyboardVerticalOffset={keyboardVerticalOffset}
      >
        {/* <Text>{register}</Text> */}
        <View style={styles.imageContainer}>
          <Image
            source={require("../assets/signupillustrate.png")}
            style={styles.image}
            resizeMode="contain"
          />
        </View>
        <View className="flex-row items-center mt-3 mb-7">
          <View className="bg-blue-900 w-1 h-9 mr-1 "></View>
          <Text
            // style={{ fontFamily: "comfortaa-regular" }}
            className="text-3xl"
          >
            Sign Up
          </Text>
        </View>

        {/* Show error message to user */}
        {/* {errorMessage ? (
          <View style={styles.errorContainer}>
            <Text style={styles.errorText}>{errorMessage}</Text>
          </View>
        ) : null} */}
        {/* input container   */}
        <View style={styles.inputContainer}>
          <AntDesign
            name="idcard"
            size={24}
            color="black"
            style={styles.icon}
          />
          <TextInput
            style={styles.input}
            value={username}
            placeholder="Enter username"
            onChangeText={onChangeuserNameHandler}
          />
        </View>

        <View style={styles.inputContainer}>
          <AntDesign
            name="idcard"
            size={24}
            color="black"
            style={styles.icon}
          />
          <TextInput
            placeholder="First Name"
            style={styles.input}
            value={first_name}
            onChangeText={onChangeFirstNameHandler}
          />
        </View>

        <View style={styles.inputContainer}>
          <AntDesign
            name="idcard"
            size={24}
            color="black"
            style={styles.icon}
          />

          <TextInput
            placeholder="Last Name"
            style={styles.input}
            value={last_name}
            onChangeText={onChangeLastNameHandler}
          />
        </View>
        <View style={styles.inputContainer}>
          <Ionicons name="md-at" size={24} color="black" />
          <TextInput
            placeholder="Enter  Email"
            style={styles.input}
            value={email}
            keyboardType="email-address"
            onChangeText={onChangeEmailHandler}
          />
        </View>
        <View style={styles.inputContainer}>
          <SimpleLineIcons name="lock" size={24} color="black" />
          <TextInput
            placeholder="password"
            style={styles.input}
            value={password}
            onChangeText={onChangePassword}
            secureTextEntry={true}
          />
        </View>
        <CustomButton
          title="Sign Up"
          color="blue"
          onPress={() => {
            register();
          }}
        />
      </KeyboardAvoidingView>
    </ScrollView>
  );
};

export default SignUpScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
    paddingHorizontal: 30,
  },
  imageContainer: {
    height: 180,
    width: "100%",
    marginBottom: 10,
  },
  image: {
    flex: 1,
    width: "100%",
    height: "100%",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    borderBottomColor: "#9B9B9B",
    borderBottomWidth: 1,
    paddingBottom: 10,
    marginVertical: 20,
  },
  input: {
    flex: 1,
    marginLeft: 10,
    fontSize: 18,
  },
  icon: {
    marginRight: 10,
  },
  textInput: {
    borderBottomColor: "#9B9B9B",
    borderBottomWidth: 1,
    flex: 1,
    marginLeft: 10,
    // paddingBottom: 8,
    marginBottom: 20,
    fontSize: 20,
  },
  errorContainer: {
    backgroundColor: "red",
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 4,
    marginBottom: 8,
  },
  errorText: {
    color: "white",
    fontSize: 14,
    fontWeight: "bold",
    textAlign: "center",
  },
});

